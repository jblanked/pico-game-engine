# originated from https://github.com/jeffmer/micropython-ili9341
# edited by JBlanked - 2025-01-09

# This is a driver for the ILI9341 TFT display for MicroPython.
# I tested this on a 2.4 TFT 240x320 SPI display with an ILI9341 controller.

# Wiring (TFT -> Pico):
# GNDD -> GND
# VCC -> VSYS (Pin 39)
# CS -> GP9 (Pin 12)
# RESET -> GP10 (Pin 14)
# DC -> GP11 (Pin 15)
# SDI/MOSI -> GP7 (Pin 10)
# SCK -> GP6 (Pin 9)
# LED -> VSYS (Pin 39)


class Font:
    AdafruitGFX5x7Font = 0
    CMSansSerif2012 = 1
    CMSansSerif201224 = 2
    CMSansSerif201231 = 3


def color565(r, g, b):
    """Convert RGB values to a 16-bit 565 RGB value"""
    return (r & 0xF8) << 8 | (g & 0xFC) << 3 | b >> 3


class ILI9341:
    """
    A class to control an ILI9341 TFT display

    @param miso_pin: The pin number for the MISO line
    @param clk_pin: The pin number for the CLK line
    @param mosi_pin: The pin number for the MOSI line
    @param cs_pin: The pin number for the CS line
    @param dc_pin: The pin number for the DC line
    @param rst_pin: The pin number for the RST line
    @param width: The width of the display
    @param height: The height of the display
    @param rotation: The rotation of the display
    """

    def __init__(
        self,
        miso_pin=4,
        clk_pin=6,
        mosi_pin=7,
        cs_pin=9,
        dc_pin=11,
        rst_pin=10,
        width=320,
        height=240,
        rotation=2,
    ):
        self.width = width
        self.height = height
        self.rotation = rotation
        self.spi = SPI(
            0,
            baudrate=40000000,
            sck=Pin(clk_pin),
            mosi=Pin(mosi_pin),
            miso=Pin(miso_pin),
        )
        self.display = _ILI9341(
            self.spi,
            cs=Pin(cs_pin),
            dc=Pin(dc_pin),
            rst=Pin(rst_pin),
            w=width,
            h=height,
            r=rotation,
        )
        self.display.erase()
        self.center_x = int(width / 2)
        self.center_y = int(height / 2)
        self.foreground = color565(255, 255, 255)
        self.background = color565(0, 0, 0)

    def println(
        self,
        text: str,
        font=Font.AdafruitGFX5x7Font,
        clear: bool = False,
    ):
        """Print a line of text to the display"""
        if clear:
            self.display.erase()
        if font == Font.AdafruitGFX5x7Font:
            self.display.set_font(AdafruitGFX5x7Font)
        elif font == Font.CMSansSerif2012:
            self.display.set_font(CMSansSerif2012)
        elif font == Font.CMSansSerif201224:
            self.display.set_font(CMSansSerif201224)
        elif font == Font.CMSansSerif201231:
            self.display.set_font(CMSansSerif201231)
        self.display.print(f"{text}\n")

    def set_color(
        self,
        foreground=color565(255, 255, 255),
        background=color565(150, 150, 150),
    ):
        """Set the color for the display"""
        self.display.set_color(foreground, background)
        self.foreground = foreground
        self.background = background

    def draw_circle(self, xpos0, ypos0, rad, col=color565(255, 255, 255)):
        """
        Helper function to draw a circle from a given position with a given radius
        This is an implementation of the midpoint circle algorithm,
        see https://en.wikipedia.org/wiki/Midpoint_circle_algorithm#C_example
        for details
        """
        x = rad - 1
        y = 0
        dx = 1
        dy = 1
        err = dx - (rad << 1)
        while x >= y:
            self.display.pixel(xpos0 + x, ypos0 + y, col)
            self.display.pixel(xpos0 + y, ypos0 + x, col)
            self.display.pixel(xpos0 - y, ypos0 + x, col)
            self.display.pixel(xpos0 - x, ypos0 + y, col)
            self.display.pixel(xpos0 - x, ypos0 - y, col)
            self.display.pixel(xpos0 - y, ypos0 - x, col)
            self.display.pixel(xpos0 + y, ypos0 - x, col)
            self.display.pixel(xpos0 + x, ypos0 - y, col)
            if err <= 0:
                y += 1
                err += dy
                dy += 2
            if err > 0:
                x -= 1
                dx += 2
                err += dx - (rad << 1)

    def scroll(self, up: bool = True, distance: int = 1):
        """Scroll the display up or down by a given distance"""
        if up:
            self.display.scroll(distance)
        else:
            self.display.scroll(-distance)

    def reset(self):
        """Reset the display"""
        self.display.reset()

    def erase(self):
        """Erase the display"""
        self.display.erase()


# This is an adapted version of the ILI934X driver as below.
# It works with multiple fonts and also works with the esp32 H/W SPI implementation
# Also includes a word wrap print function
# Proportional fonts are generated by Peter Hinch's Font-to-py
# MIT License; Copyright (c) 2017 Jeffrey N. Magee

# This file is part of MicroPython ILI934X driver
# Copyright (c) 2016 - 2017 Radomir Dopieralski, Mika Tuupola
#
# Licensed under the MIT license:
#   http://www.opensource.org/licenses/mit-license.php
#
# Project home:
#   https://github.com/tuupola/micropython-ili934x

import time
import ustruct
import framebuf
from micropython import const
from machine import Pin, SPI

_RDDSDR = const(0x0F)  # Read Display Self-Diagnostic Result
_SLPOUT = const(0x11)  # Sleep Out
_GAMSET = const(0x26)  # Gamma Set
_DISPOFF = const(0x28)  # Display Off
_DISPON = const(0x29)  # Display On
_CASET = const(0x2A)  # Column Address Set
_PASET = const(0x2B)  # Page Address Set
_RAMWR = const(0x2C)  # Memory Write
_RAMRD = const(0x2E)  # Memory Read
_MADCTL = const(0x36)  # Memory Access Control
_VSCRSADD = const(0x37)  # Vertical Scrolling Start Address
_PIXSET = const(0x3A)  # Pixel Format Set
_PWCTRLA = const(0xCB)  # Power Control A
_PWCRTLB = const(0xCF)  # Power Control B
_DTCTRLA = const(0xE8)  # Driver Timing Control A
_DTCTRLB = const(0xEA)  # Driver Timing Control B
_PWRONCTRL = const(0xED)  # Power on Sequence Control
_PRCTRL = const(0xF7)  # Pump Ratio Control
_PWCTRL1 = const(0xC0)  # Power Control 1
_PWCTRL2 = const(0xC1)  # Power Control 2
_VMCTRL1 = const(0xC5)  # VCOM Control 1
_VMCTRL2 = const(0xC7)  # VCOM Control 2
_FRMCTR1 = const(0xB1)  # Frame Rate Control 1
_DISCTRL = const(0xB6)  # Display Function Control
_ENA3G = const(0xF2)  # Enable 3G
_PGAMCTRL = const(0xE0)  # Positive Gamma Control
_NGAMCTRL = const(0xE1)  # Negative Gamma Control

_CHUNK = const(1024)  # maximum number of pixels per spi write


class _ILI9341:

    def __init__(self, spi, cs, dc, rst, w, h, r):
        self.spi = spi
        self.cs = cs
        self.dc = dc
        self.rst = rst
        self._init_width = w
        self._init_height = h
        self.width = w
        self.height = h
        self.rotation = r
        self.cs.init(self.cs.OUT, value=1)
        self.dc.init(self.dc.OUT, value=0)
        self.rst.init(self.rst.OUT, value=0)
        self.reset()
        self.init()
        self._scroll = 0
        self._buf = bytearray(_CHUNK * 2)
        self._colormap = bytearray(
            b"\x00\x00\xFF\xFF"
        )  # default white foregraound, black background
        self._x = 0
        self._y = 0
        self._font = AdafruitGFX5x7Font
        self.scrolling = False

    def set_color(self, fg, bg):
        self._colormap[0] = bg >> 8
        self._colormap[1] = bg & 255
        self._colormap[2] = fg >> 8
        self._colormap[3] = fg & 255

    def set_pos(self, x, y):
        self._x = x
        self._y = y

    def reset_scroll(self):
        self.scrolling = False
        self._scroll = 0
        self.scroll(0)

    def set_font(self, font):
        self._font = font

    def init(self):
        for command, data in (
            (_RDDSDR, b"\x03\x80\x02"),
            (_PWCRTLB, b"\x00\xc1\x30"),
            (_PWRONCTRL, b"\x64\x03\x12\x81"),
            (_DTCTRLA, b"\x85\x00\x78"),
            (_PWCTRLA, b"\x39\x2c\x00\x34\x02"),
            (_PRCTRL, b"\x20"),
            (_DTCTRLB, b"\x00\x00"),
            (_PWCTRL1, b"\x23"),
            (_PWCTRL2, b"\x10"),
            (_VMCTRL1, b"\x3e\x28"),
            (_VMCTRL2, b"\x86"),
        ):
            self._write(command, data)

        if self.rotation == 0:  # 0 deg
            self._write(_MADCTL, b"\x48")
            self.width = self._init_height
            self.height = self._init_width
        elif self.rotation == 1:  # 90 deg
            self._write(_MADCTL, b"\x28")
            self.width = self._init_width
            self.height = self._init_height
        elif self.rotation == 2:  # 180 deg
            self._write(_MADCTL, b"\x88")
            self.width = self._init_height
            self.height = self._init_width
        elif self.rotation == 3:  # 270 deg
            self._write(_MADCTL, b"\xE8")
            self.width = self._init_width
            self.height = self._init_height
        elif self.rotation == 4:  # Mirrored + 0 deg
            self._write(_MADCTL, b"\xC8")
            self.width = self._init_height
            self.height = self._init_width
        elif self.rotation == 5:  # Mirrored + 90 deg
            self._write(_MADCTL, b"\x68")
            self.width = self._init_width
            self.height = self._init_height
        elif self.rotation == 6:  # Mirrored + 180 deg
            self._write(_MADCTL, b"\x08")
            self.width = self._init_height
            self.height = self._init_width
        elif self.rotation == 7:  # Mirrored + 270 deg
            self._write(_MADCTL, b"\xA8")
            self.width = self._init_width
            self.height = self._init_height
        else:
            self._write(_MADCTL, b"\x08")

        for command, data in (
            (_PIXSET, b"\x55"),
            (_FRMCTR1, b"\x00\x18"),
            (_DISCTRL, b"\x08\x82\x27"),
            (_ENA3G, b"\x00"),
            (_GAMSET, b"\x01"),
            (
                _PGAMCTRL,
                b"\x0f\x31\x2b\x0c\x0e\x08\x4e\xf1\x37\x07\x10\x03\x0e\x09\x00",
            ),
            (
                _NGAMCTRL,
                b"\x00\x0e\x14\x03\x11\x07\x31\xc1\x48\x08\x0f\x0c\x31\x36\x0f",
            ),
        ):
            self._write(command, data)
        self._write(_SLPOUT)
        time.sleep_ms(120)
        self._write(_DISPON)

    def reset(self):
        self.rst(0)
        time.sleep_ms(50)
        self.rst(1)
        time.sleep_ms(50)

    def _write(self, command, data=None):
        self.dc(0)
        self.cs(0)
        self.spi.write(bytearray([command]))
        self.cs(1)
        if data is not None:
            self._data(data)

    def _data(self, data):
        self.dc(1)
        self.cs(0)
        self.spi.write(data)
        self.cs(1)

    def _writeblock(self, x0, y0, x1, y1, data=None):
        self._write(_CASET, ustruct.pack(">HH", x0, x1))
        self._write(_PASET, ustruct.pack(">HH", y0, y1))
        self._write(_RAMWR, data)

    def _readblock(self, x0, y0, x1, y1, data=None):
        self._write(_CASET, ustruct.pack(">HH", x0, x1))
        self._write(_PASET, ustruct.pack(">HH", y0, y1))
        if data is None:
            return self._read(_RAMRD, (x1 - x0 + 1) * (y1 - y0 + 1) * 3)

    def _read(self, command, count):
        self.dc(0)
        self.cs(0)
        self.spi.write(bytearray([command]))
        data = self.spi.read(count)
        self.cs(1)
        return data

    def pixel(self, x, y, color=None):
        if color is None:
            r, b, g = self._readblock(x, y, x, y)
            return color565(r, g, b)
        if not 0 <= x < self.width or not 0 <= y < self.height:
            return
        self._writeblock(x, y, x, y, ustruct.pack(">H", color))

    def fill_rectangle(self, x, y, w, h, color=None):
        x = min(self.width - 1, max(0, x))
        y = min(self.height - 1, max(0, y))
        w = min(self.width - x, max(1, w))
        h = min(self.height - y, max(1, h))
        if color:
            color = ustruct.pack(">H", color)
        else:
            color = self._colormap[0:2]  # background
        for i in range(_CHUNK):
            self._buf[2 * i] = color[0]
            self._buf[2 * i + 1] = color[1]
        chunks, rest = divmod(w * h, _CHUNK)
        self._writeblock(x, y, x + w - 1, y + h - 1, None)
        if chunks:
            for count in range(chunks):
                self._data(self._buf)
        if rest != 0:
            mv = memoryview(self._buf)
            self._data(mv[: rest * 2])

    def erase(self):
        self.fill_rectangle(0, 0, self.width, self.height)

    def blit(self, bitbuff, x, y, w, h):
        x = min(self.width - 1, max(0, x))
        y = min(self.height - 1, max(0, y))
        w = min(self.width - x, max(1, w))
        h = min(self.height - y, max(1, h))
        chunks, rest = divmod(w * h, _CHUNK)
        self._writeblock(x, y, x + w - 1, y + h - 1, None)
        written = 0
        for iy in range(h):
            for ix in range(w):
                index = ix + iy * w - written
                if index >= _CHUNK:
                    self._data(self._buf)
                    written += _CHUNK
                    index -= _CHUNK
                c = bitbuff.pixel(ix, iy)
                # check out of range
                if (index * 2 + 1) < len(self._buf) and (c * 2 + 1) < len(
                    self._colormap
                ):
                    self._buf[index * 2] = self._colormap[c * 2]
                    self._buf[index * 2 + 1] = self._colormap[c * 2 + 1]
        rest = w * h - written
        if rest != 0:
            mv = memoryview(self._buf)
            self._data(mv[: rest * 2])

    def chars(self, str, x, y):
        str_w = self._font.get_width(str)
        div, rem = divmod(self._font.height(), 8)
        nbytes = div + 1 if rem else div
        buf = bytearray(str_w * nbytes)
        pos = 0
        for ch in str:
            glyph, char_w = self._font.get_ch(ch)
            for row in range(nbytes):
                index = row * str_w + pos
                for i in range(char_w):
                    buf[index + i] = glyph[nbytes * i + row]
            pos += char_w
        fb = framebuf.FrameBuffer(buf, str_w, self._font.height(), framebuf.MONO_VLSB)
        self.blit(fb, x, y, str_w, self._font.height())
        return x + str_w

    def scroll(self, dy):
        self._scroll = (self._scroll + dy) % self.height
        self._write(_VSCRSADD, ustruct.pack(">H", self._scroll))

    def next_line(self, cury, char_h):
        global scrolling
        if not self.scrolling:
            res = cury + char_h
            self.scrolling = res >= self.height
        if self.scrolling:
            self.scroll(char_h)
            res = (self.height - char_h + self._scroll) % self.height
            self.fill_rectangle(0, res, self.width, self._font.height())
        return res

    def write(self, text):  # does character wrap, compatible with stream output
        curx = self._x
        cury = self._y
        char_h = self._font.height()
        width = 0
        written = 0
        for pos, ch in enumerate(text):
            if ch == "\n":
                if pos > 0:
                    self.chars(text[written:pos], curx, cury)
                curx = 0
                written = pos + 1
                width = 0
                cury = self.next_line(cury, char_h)
            else:
                char_w = self._font.get_width(ch)
                if curx + width + char_w >= self.width:
                    self.chars(text[written:pos], curx, cury)
                    curx = 0
                    written = pos
                    width = char_h
                    cury = self.next_line(cury, char_h)
                else:
                    width += char_w
        if written < len(text):
            curx = self.chars(text[written:], curx, cury)
        self._x = curx
        self._y = cury

    def print(self, text):  # does word wrap, leaves self._x unchanged
        cury = self._y
        curx = self._x
        char_h = self._font.height()
        char_w = self._font.max_width()
        lines = text.split("\n")
        for line in lines:
            words = line.split(" ")
            for word in words:
                if curx + self._font.get_width(word) >= self.width:
                    curx = self._x
                    cury = self.next_line(cury, char_h)
                    while self._font.get_width(word) > self.width:
                        self.chars(word[: self.width // char_w], curx, cury)
                        word = word[self.width // char_w :]
                        cury = self.next_line(cury, char_h)
                if len(word) > 0:
                    curx = self.chars(word + " ", curx, cury)
            curx = self._x
            cury = self.next_line(cury, char_h)
        self._y = cury


class AdafruitGFX5x7Font:
    # Original Adafruit_GFX 5x7 font data stored as a single bytes object.
    _font = (
        b"\x00\x00\x00\x00\x00"
        b"\x3E\x5B\x4F\x5B\x3E"
        b"\x3E\x6B\x4F\x6B\x3E"
        b"\x1C\x3E\x7C\x3E\x1C"
        b"\x18\x3C\x7E\x3C\x18"
        b"\x1C\x57\x7D\x57\x1C"
        b"\x1C\x5E\x7F\x5E\x1C"
        b"\x00\x18\x3C\x18\x00"
        b"\xFF\xE7\xC3\xE7\xFF"
        b"\x00\x18\x24\x18\x00"
        b"\xFF\xE7\xDB\xE7\xFF"
        b"\x30\x48\x3A\x06\x0E"
        b"\x26\x29\x79\x29\x26"
        b"\x40\x7F\x05\x05\x07"
        b"\x40\x7F\x05\x25\x3F"
        b"\x5A\x3C\xE7\x3C\x5A"
        b"\x7F\x3E\x1C\x1C\x08"
        b"\x08\x1C\x1C\x3E\x7F"
        b"\x14\x22\x7F\x22\x14"
        b"\x5F\x5F\x00\x5F\x5F"
        b"\x06\x09\x7F\x01\x7F"
        b"\x00\x66\x89\x95\x6A"
        b"\x60\x60\x60\x60\x60"
        b"\x94\xA2\xFF\xA2\x94"
        b"\x08\x04\x7E\x04\x08"
        b"\x10\x20\x7E\x20\x10"
        b"\x08\x08\x2A\x1C\x08"
        b"\x08\x1C\x2A\x08\x08"
        b"\x1E\x10\x10\x10\x10"
        b"\x0C\x1E\x0C\x1E\x0C"
        b"\x30\x38\x3E\x38\x30"
        b"\x06\x0E\x3E\x0E\x06"
        b"\x00\x00\x00\x00\x00"
        b"\x00\x00\x5F\x00\x00"
        b"\x00\x07\x00\x07\x00"
        b"\x14\x7F\x14\x7F\x14"
        b"\x24\x2A\x7F\x2A\x12"
        b"\x23\x13\x08\x64\x62"
        b"\x36\x49\x56\x20\x50"
        b"\x00\x08\x07\x03\x00"
        b"\x00\x1C\x22\x41\x00"
        b"\x00\x41\x22\x1C\x00"
        b"\x2A\x1C\x7F\x1C\x2A"
        b"\x08\x08\x3E\x08\x08"
        b"\x00\x80\x70\x30\x00"
        b"\x08\x08\x08\x08\x08"
        b"\x00\x00\x60\x60\x00"
        b"\x20\x10\x08\x04\x02"
        b"\x3E\x51\x49\x45\x3E"
        b"\x00\x42\x7F\x40\x00"
        b"\x72\x49\x49\x49\x46"
        b"\x21\x41\x49\x4D\x33"
        b"\x18\x14\x12\x7F\x10"
        b"\x27\x45\x45\x45\x39"
        b"\x3C\x4A\x49\x49\x31"
        b"\x41\x21\x11\x09\x07"
        b"\x36\x49\x49\x49\x36"
        b"\x46\x49\x49\x29\x1E"
        b"\x00\x00\x14\x00\x00"
        b"\x00\x40\x34\x00\x00"
        b"\x00\x08\x14\x22\x41"
        b"\x14\x14\x14\x14\x14"
        b"\x00\x41\x22\x14\x08"
        b"\x02\x01\x59\x09\x06"
        b"\x3E\x41\x5D\x59\x4E"
        b"\x7C\x12\x11\x12\x7C"
        b"\x7F\x49\x49\x49\x36"
        b"\x3E\x41\x41\x41\x22"
        b"\x7F\x41\x41\x41\x3E"
        b"\x7F\x49\x49\x49\x41"
        b"\x7F\x09\x09\x09\x01"
        b"\x3E\x41\x41\x51\x73"
        b"\x7F\x08\x08\x08\x7F"
        b"\x00\x41\x7F\x41\x00"
        b"\x20\x40\x41\x3F\x01"
        b"\x7F\x08\x14\x22\x41"
        b"\x7F\x40\x40\x40\x40"
        b"\x7F\x02\x1C\x02\x7F"
        b"\x7F\x04\x08\x10\x7F"
        b"\x3E\x41\x41\x41\x3E"
        b"\x7F\x09\x09\x09\x06"
        b"\x3E\x41\x51\x21\x5E"
        b"\x7F\x09\x19\x29\x46"
        b"\x26\x49\x49\x49\x32"
        b"\x03\x01\x7F\x01\x03"
        b"\x3F\x40\x40\x40\x3F"
        b"\x1F\x20\x40\x20\x1F"
        b"\x3F\x40\x38\x40\x3F"
        b"\x63\x14\x08\x14\x63"
        b"\x03\x04\x78\x04\x03"
        b"\x61\x59\x49\x4D\x43"
        b"\x00\x7F\x41\x41\x41"
        b"\x02\x04\x08\x10\x20"
        b"\x00\x41\x41\x41\x7F"
        b"\x04\x02\x01\x02\x04"
        b"\x40\x40\x40\x40\x40"
        b"\x00\x03\x07\x08\x00"
        b"\x20\x54\x54\x78\x40"
        b"\x7F\x28\x44\x44\x38"
        b"\x38\x44\x44\x44\x28"
        b"\x38\x44\x44\x28\x7F"
        b"\x38\x54\x54\x54\x18"
        b"\x00\x08\x7E\x09\x02"
        b"\x18\xA4\xA4\x9C\x78"
        b"\x7F\x08\x04\x04\x78"
        b"\x00\x44\x7D\x40\x00"
        b"\x20\x40\x40\x3D\x00"
        b"\x7F\x10\x28\x44\x00"
        b"\x00\x41\x7F\x40\x00"
        b"\x7C\x04\x78\x04\x78"
        b"\x7C\x08\x04\x04\x78"
        b"\x38\x44\x44\x44\x38"
        b"\xFC\x18\x24\x24\x18"
        b"\x18\x24\x24\x18\xFC"
        b"\x7C\x08\x04\x04\x08"
        b"\x48\x54\x54\x54\x24"
        b"\x04\x04\x3F\x44\x24"
        b"\x3C\x40\x40\x20\x7C"
        b"\x1C\x20\x40\x20\x1C"
        b"\x3C\x40\x30\x40\x3C"
        b"\x44\x28\x10\x28\x44"
        b"\x4C\x90\x90\x90\x7C"
        b"\x44\x64\x54\x4C\x44"
        b"\x00\x08\x36\x41\x00"
        b"\x00\x00\x77\x00\x00"
        b"\x00\x41\x36\x08\x00"
        b"\x02\x01\x02\x04\x02"
        b"\x3C\x26\x23\x26\x3C"
        b"\x1E\xA1\xA1\x61\x12"
        b"\x3A\x40\x40\x20\x7A"
        b"\x38\x54\x54\x55\x59"
        b"\x21\x55\x55\x79\x41"
        b"\x21\x54\x54\x78\x41"
        b"\x21\x55\x54\x78\x40"
        b"\x20\x54\x55\x79\x40"
        b"\x0C\x1E\x52\x72\x12"
        b"\x39\x55\x55\x55\x59"
        b"\x39\x54\x54\x54\x59"
        b"\x39\x55\x54\x54\x58"
        b"\x00\x00\x45\x7C\x41"
        b"\x00\x02\x45\x7D\x42"
        b"\x00\x01\x45\x7C\x40"
        b"\xF0\x29\x24\x29\xF0"
        b"\xF0\x28\x25\x28\xF0"
        b"\x7C\x54\x55\x45\x00"
        b"\x20\x54\x54\x7C\x54"
        b"\x7C\x0A\x09\x7F\x49"
        b"\x32\x49\x49\x49\x32"
        b"\x32\x48\x48\x48\x32"
        b"\x32\x4A\x48\x48\x30"
        b"\x3A\x41\x41\x21\x7A"
        b"\x3A\x42\x40\x20\x78"
        b"\x00\x9D\xA0\xA0\x7D"
        b"\x39\x44\x44\x44\x39"
        b"\x3D\x40\x40\x40\x3D"
        b"\x3C\x24\xFF\x24\x24"
        b"\x48\x7E\x49\x43\x66"
        b"\x2B\x2F\xFC\x2F\x2B"
        b"\xFF\x09\x29\xF6\x20"
        b"\xC0\x88\x7E\x09\x03"
        b"\x20\x54\x54\x79\x41"
        b"\x00\x00\x44\x7D\x41"
        b"\x30\x48\x48\x4A\x32"
        b"\x38\x40\x40\x22\x7A"
        b"\x00\x7A\x0A\x0A\x72"
        b"\x7D\x0D\x19\x31\x7D"
        b"\x26\x29\x29\x2F\x28"
        b"\x26\x29\x29\x29\x26"
        b"\x30\x48\x4D\x40\x20"
        b"\x38\x08\x08\x08\x08"
        b"\x08\x08\x08\x08\x38"
        b"\x2F\x10\xC8\xAC\xBA"
        b"\x2F\x10\x28\x34\xFA"
        b"\x00\x00\x7B\x00\x00"
        b"\x08\x14\x2A\x14\x22"
        b"\x22\x14\x2A\x14\x08"
        b"\xAA\x00\x55\x00\xAA"
        b"\xAA\x55\xAA\x55\xAA"
        b"\x00\x00\x00\xFF\x00"
        b"\x10\x10\x10\xFF\x00"
        b"\x14\x14\x14\xFF\x00"
        b"\x10\x10\xFF\x00\xFF"
        b"\x10\x10\xF0\x10\xF0"
        b"\x14\x14\x14\xFC\x00"
        b"\x14\x14\xF7\x00\xFF"
        b"\x00\x00\xFF\x00\xFF"
        b"\x14\x14\xF4\x04\xFC"
        b"\x14\x14\x17\x10\x1F"
        b"\x10\x10\x1F\x10\x1F"
        b"\x14\x14\x14\x1F\x00"
        b"\x10\x10\x10\xF0\x00"
        b"\x00\x00\x00\x1F\x10"
        b"\x10\x10\x10\x1F\x10"
        b"\x10\x10\x10\xF0\x10"
        b"\x00\x00\x00\xFF\x10"
        b"\x10\x10\x10\x10\x10"
        b"\x10\x10\x10\xFF\x10"
        b"\x00\x00\x00\xFF\x14"
        b"\x00\x00\xFF\x00\xFF"
        b"\x00\x00\x1F\x10\x17"
        b"\x00\x00\xFC\x04\xF4"
        b"\x14\x14\x17\x10\x17"
        b"\x14\x14\xF4\x04\xF4"
        b"\x00\x00\xFF\x00\xF7"
        b"\x14\x14\x14\x14\x14"
        b"\x14\x14\xF7\x00\xF7"
        b"\x14\x14\x14\x17\x14"
        b"\x10\x10\x1F\x10\x1F"
        b"\x14\x14\x14\xF4\x14"
        b"\x10\x10\xF0\x10\xF0"
        b"\x00\x00\x1F\x10\x1F"
        b"\x00\x00\x00\x1F\x14"
        b"\x00\x00\x00\xFC\x14"
        b"\x00\x00\xF0\x10\xF0"
        b"\x10\x10\xFF\x10\xFF"
        b"\x14\x14\x14\xFF\x14"
        b"\x10\x10\x10\x1F\x00"
        b"\x00\x00\x00\xF0\x10"
        b"\xFF\xFF\xFF\xFF\xFF"
        b"\xF0\xF0\xF0\xF0\xF0"
        b"\xFF\xFF\xFF\x00\x00"
        b"\x00\x00\x00\xFF\xFF"
        b"\x0F\x0F\x0F\x0F\x0F"
        b"\x38\x44\x44\x38\x44"
        b"\x7C\x2A\x2A\x3E\x14"
        b"\x7E\x02\x02\x06\x06"
        b"\x02\x7E\x02\x7E\x02"
        b"\x63\x55\x49\x41\x63"
        b"\x38\x44\x44\x3C\x04"
        b"\x40\x7E\x20\x1E\x20"
        b"\x06\x02\x7E\x02\x02"
        b"\x99\xA5\xE7\xA5\x99"
        b"\x1C\x2A\x49\x2A\x1C"
        b"\x4C\x72\x01\x72\x4C"
        b"\x30\x4A\x4D\x4D\x30"
        b"\x30\x48\x78\x48\x30"
        b"\xBC\x62\x5A\x46\x3D"
        b"\x3E\x49\x49\x49\x00"
        b"\x7E\x01\x01\x01\x7E"
        b"\x2A\x2A\x2A\x2A\x2A"
        b"\x44\x44\x5F\x44\x44"
        b"\x40\x51\x4A\x44\x40"
        b"\x40\x44\x4A\x51\x40"
        b"\x00\x00\xFF\x01\x03"
        b"\xE0\x80\xFF\x00\x00"
        b"\x08\x08\x6B\x6B\x08"
        b"\x36\x12\x36\x24\x36"
        b"\x06\x0F\x09\x0F\x06"
        b"\x00\x00\x18\x18\x00"
        b"\x00\x00\x10\x10\x00"
        b"\x30\x40\xFF\x01\x01"
        b"\x00\x1F\x01\x01\x1E"
        b"\x00\x19\x1D\x17\x12"
        b"\x00\x3C\x3C\x3C\x3C"
        b"\x00\x00\x00\x00\x00"
    )

    # Create a memoryview for fast slicing.
    _mvfont = memoryview(_font)

    @classmethod
    def height(cls):
        """Return the height of the font."""
        return 8

    @classmethod
    def max_width(cls):
        """Return the maximum width of a character in the font."""
        return 6

    @classmethod
    def hmap(cls):
        """Return the hmap property (unused in this font)."""
        return False

    @classmethod
    def reverse(cls):
        """Return whether the font is reversed."""
        return False

    @classmethod
    def monospaced(cls):
        """Return whether the font is monospaced."""
        return True

    @classmethod
    def min_ch(cls):
        """Return the minimum character code in the font."""
        return 0

    @classmethod
    def max_ch(cls):
        """Return the maximum character code in the font."""
        return 255

    @classmethod
    def get_width(cls, s):
        """
        Get the width in pixels of the string `s`.

        Since each character is 6 pixels wide, this is simply:
            len(s) * 6
        """
        return len(s) * 6

    @classmethod
    def get_ch(cls, ch):
        """
        Retrieve the bitmap for the character `ch`.

        The font stores 5 bytes per character. The returned bytearray is 6 bytes
        long, with the first byte set to 0 (for spacing) and the following 5 bytes
        copied from the font data.

        Returns:
            A tuple of (bytearray, width), where width is always 6.
        """
        ordch = ord(ch)
        offset = ordch * 5
        buf = bytearray(6)
        buf[0] = 0
        buf[1:] = cls._mvfont[offset : offset + 5]
        return buf, 6


class CMSansSerif2012:
    """
    Font generated from 'CM Sans Serif 2012.ttf' (version 0.2).
    """

    version = "0.2"

    # Font raw data.
    _font = (
        b"\x08\x00\x08\x00\x0c\x00\x8c\x07\xcc\x07\xcc\x00\x7c\x00\x38\x00"
        b"\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\xfc\x06"
        b"\xfc\x06\x00\x00\x05\x00\x1c\x00\x3c\x00\x00\x00\x3c\x00\x00\x00"
        b"\x07\x00\x40\x03\xf0\x03\xf0\x03\x30\x03\xf0\x03\x30\x03\x30\x00"
        b"\x07\x00\x30\x00\x78\x03\x6c\x02\xfc\x07\xd8\x03\x90\x03\x00\x00"
        b"\x0b\x00\x18\x00\x3c\x00\x3c\x04\x3c\x03\xd8\x01\xf0\x03\xd8\x07"
        b"\xc4\x06\xc0\x07\x80\x03\x00\x00\x09\x00\x80\x03\xf8\x07\x7c\x06"
        b"\x4c\x06\xfc\x06\x98\x07\xc0\x07\xc0\x05\x00\x04\x02\x00\x1c\x00"
        b"\x3c\x00\x04\x00\xf0\x03\xfc\x0f\x0e\x1c\x02\x10\x05\x00\x02\x10"
        b"\x0e\x1c\xfc\x0f\xf0\x03\x00\x00\x05\x00\x0c\x00\x3c\x00\x18\x00"
        b"\x2c\x00\x0c\x00\x07\x00\xc0\x00\xc0\x00\xf0\x03\xf0\x03\xc0\x00"
        b"\xc0\x00\x00\x00\x03\x00\x00\x16\x00\x0e\x00\x00\x04\x00\xc0\x00"
        b"\xc0\x00\xc0\x00\xc0\x00\x03\x00\x00\x06\x00\x06\x00\x00\x04\x00"
        b"\x00\x06\xe0\x07\xfc\x00\x0e\x00\x08\x00\xf0\x01\xf8\x03\x1c\x07"
        b"\x0c\x06\x1c\x07\xf8\x03\xf0\x01\x00\x00\x04\x00\x18\x00\xfc\x07"
        b"\xfc\x07\x00\x00\x08\x00\x18\x04\x1c\x07\x8c\x06\x8c\x06\x4c\x06"
        b"\x7c\x06\x38\x06\x00\x00\x07\x00\x08\x02\x0c\x06\x0c\x06\x6c\x06"
        b"\x6c\x06\xfc\x07\xd8\x03\x07\x00\x80\x01\xe0\x01\xb0\x01\x9c\x01"
        b"\xfc\x07\xfc\x07\x80\x01\x07\x00\x00\x02\xfc\x06\x6c\x06\x6c\x06"
        b"\x6c\x06\xcc\x03\xc0\x03\x08\x00\xf0\x01\xf8\x03\x6c\x06\x6c\x06"
        b"\x6c\x06\xe8\x07\xc0\x03\x00\x00\x06\x00\x0c\x00\x0c\x07\xcc\x07"
        b"\xfc\x00\x1c\x00\x0c\x00\x07\x00\x98\x03\xfc\x07\x6c\x06\x6c\x06"
        b"\x6c\x06\xfc\x07\x98\x03\x08\x00\x78\x02\xfc\x06\xcc\x06\xcc\x06"
        b"\xcc\x06\xf8\x03\xf0\x01\x00\x00\x03\x00\x30\x06\x30\x06\x00\x00"
        b"\x03\x00\x30\x16\x30\x0e\x00\x00\x06\x00\xc0\x01\xc0\x01\x60\x03"
        b"\x60\x03\x30\x06\x00\x00\x06\x00\x60\x03\x60\x03\x60\x03\x60\x03"
        b"\x60\x03\x60\x03\x06\x00\x30\x06\x60\x03\x60\x03\x40\x01\xc0\x01"
        b"\x00\x00\x08\x00\x08\x00\x0c\x00\x8c\x07\xcc\x07\xcc\x00\x7c\x00"
        b"\x38\x00\x00\x00\x0b\x00\xe0\x00\xf8\x01\x18\x03\xec\x07\xbc\x07"
        b"\xfc\x06\xfc\x07\x9c\x03\xf8\x01\xf0\x00\x00\x00\x08\x00\x00\x06"
        b"\x80\x07\xf0\x01\x9c\x01\x8c\x01\xf8\x01\xc0\x07\x00\x07\x08\x00"
        b"\xfc\x07\xfc\x07\x6c\x06\x6c\x06\x6c\x06\xfc\x07\xd8\x03\x00\x00"
        b"\x09\x00\xe0\x00\xf8\x03\x18\x03\x0c\x06\x0c\x06\x0c\x06\x1c\x07"
        b"\x18\x03\x20\x01\x09\x00\xfc\x07\xfc\x07\x0c\x06\x0c\x06\x1c\x07"
        b"\xf8\x03\xf0\x01\x00\x00\x00\x00\x08\x00\xfc\x07\xfc\x07\x6c\x06"
        b"\x6c\x06\x6c\x06\x6c\x06\x0c\x06\x00\x00\x07\x00\xfc\x07\xfc\x07"
        b"\xcc\x00\xcc\x00\xcc\x00\xcc\x00\x0c\x00\x0a\x00\xe0\x01\xf8\x03"
        b"\x18\x07\x0c\x06\x0c\x06\xcc\x06\xdc\x02\xd8\x07\xe0\x07\x00\x00"
        b"\x09\x00\xfc\x07\xfc\x07\x60\x00\x60\x00\x60\x00\xfc\x07\xfc\x07"
        b"\x00\x00\x00\x00\x03\x00\xfc\x07\xfc\x07\x00\x00\x07\x00\x80\x03"
        b"\x80\x07\x00\x06\x00\x06\xfc\x07\xfc\x03\x00\x00\x08\x00\xfc\x07"
        b"\xfc\x07\x60\x00\xf0\x00\xd8\x01\x0c\x07\x04\x06\x04\x04\x07\x00"
        b"\xfc\x07\xfc\x07\x00\x06\x00\x06\x00\x06\x00\x06\x00\x00\x0b\x00"
        b"\xfc\x07\xfc\x07\x3c\x00\xe0\x03\x00\x06\xe0\x03\x3c\x00\xfc\x07"
        b"\xfc\x07\x00\x00\x00\x00\x09\x00\xfc\x07\xfc\x07\x38\x00\xe0\x00"
        b"\x80\x03\xfc\x07\xfc\x07\x00\x00\x00\x00\x0a\x00\xf0\x01\xf8\x03"
        b"\x1c\x07\x0c\x06\x0c\x06\x0c\x06\x1c\x07\xf8\x03\xf0\x01\x00\x00"
        b"\x09\x00\xfc\x07\xfc\x07\xcc\x00\xcc\x00\xcc\x00\xfc\x00\x78\x00"
        b"\x00\x00\x00\x00\x0a\x00\xf0\x01\xf8\x03\x1c\x07\x0c\x06\x8c\x06"
        b"\x8c\x07\x1c\x07\xf8\x07\xf0\x05\x00\x00\x09\x00\xfc\x07\xfc\x07"
        b"\xcc\x00\xcc\x00\xcc\x03\x7c\x07\x78\x04\x00\x00\x00\x00\x09\x00"
        b"\x38\x01\x3c\x03\x4c\x06\x4c\x06\x4c\x06\x4c\x06\x98\x07\x90\x03"
        b"\x00\x00\x07\x00\x0c\x00\x0c\x00\xfc\x07\xfc\x07\x0c\x00\x0c\x00"
        b"\x00\x00\x09\x00\xfc\x03\xfc\x07\x00\x06\x00\x06\x00\x06\xfc\x07"
        b"\xfc\x01\x00\x00\x00\x00\x08\x00\x0c\x00\x7c\x00\xe0\x03\x00\x07"
        b"\x80\x07\xf8\x01\x3c\x00\x04\x00\x0b\x00\x0c\x00\xfc\x00\xe0\x07"
        b"\x80\x07\xf8\x03\x1c\x00\xfc\x00\xc0\x07\x80\x07\xfc\x01\x1c\x00"
        b"\x08\x00\x04\x04\x0c\x07\xb8\x03\xf0\x00\xf0\x01\x9c\x07\x0c\x06"
        b"\x04\x04\x08\x00\x04\x00\x1c\x00\x78\x00\xe0\x07\xe0\x07\x78\x00"
        b"\x1c\x00\x04\x00\x07\x00\x0c\x06\x0c\x07\x8c\x07\xcc\x06\x2c\x06"
        b"\x1c\x06\x0c\x06\x04\x00\xff\x1f\xff\x1f\x03\x18\x00\x00\x04\x00"
        b"\x0e\x00\xfe\x00\xe0\x07\x00\x07\x04\x00\x03\x18\xff\x1f\xff\x1f"
        b"\x00\x00\x07\x00\x80\x00\xe0\x00\x7c\x00\x0c\x00\x7c\x00\xe0\x00"
        b"\x80\x00\x0a\x00\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18"
        b"\x00\x18\x00\x18\x00\x18\x00\x18\x05\x00\x04\x00\x0c\x00\x08\x00"
        b"\x00\x00\x00\x00\x08\x00\x00\x03\xe0\x07\xb0\x06\xb0\x06\xb0\x02"
        b"\xf0\x07\xe0\x07\x00\x00\x09\x00\xfe\x07\xfe\x07\x30\x02\x30\x06"
        b"\x30\x06\xe0\x07\xc0\x01\x00\x00\x00\x00\x07\x00\xc0\x01\xe0\x03"
        b"\x30\x06\x30\x06\x30\x06\x60\x03\x40\x01\x08\x00\xc0\x01\xf0\x07"
        b"\x30\x06\x30\x06\x30\x06\xfe\x07\xfe\x07\x00\x00\x07\x00\xc0\x01"
        b"\xe0\x03\xb0\x07\xb0\x07\xb0\x07\xe0\x03\xc0\x01\x04\x00\x20\x00"
        b"\xfc\x07\xfe\x07\x00\x00\x08\x00\xc0\x11\xf0\x1f\x30\x36\x30\x36"
        b"\x20\x36\xf0\x1f\xf0\x0f\x00\x00\x08\x00\xfe\x07\xfe\x07\x30\x00"
        b"\x30\x00\xf0\x07\xe0\x07\x00\x00\x00\x00\x03\x00\xfc\x07\xfc\x07"
        b"\x00\x00\x03\x00\xec\x7f\xec\x3f\x00\x00\x07\x00\xfe\x07\xfe\x07"
        b"\xc0\x00\xe0\x01\xb0\x07\x10\x06\x10\x04\x03\x00\xfe\x07\xfe\x07"
        b"\x00\x00\x0c\x00\xf0\x07\xf0\x07\x30\x00\x30\x00\xf0\x07\xe0\x07"
        b"\x30\x00\x30\x00\xf0\x07\xe0\x07\x00\x00\x00\x00\x08\x00\xf0\x07"
        b"\xf0\x07\x30\x00\x30\x00\xf0\x07\xe0\x07\x00\x00\x00\x00\x08\x00"
        b"\xc0\x01\xe0\x03\x30\x06\x30\x06\x30\x06\xe0\x03\xc0\x01\x00\x00"
        b"\x09\x00\xf0\x3f\xf0\x3f\x30\x06\x30\x06\x30\x06\xf0\x07\xc0\x01"
        b"\x00\x00\x00\x00\x08\x00\xc0\x01\xf0\x07\x30\x06\x30\x06\x30\x06"
        b"\xf0\x3f\xf0\x3f\x00\x00\x04\x00\xf0\x07\xf0\x07\x30\x00\x30\x00"
        b"\x08\x00\x60\x00\x70\x03\xb0\x07\xf0\x06\xb0\x06\xa0\x07\x00\x03"
        b"\x00\x00\x04\x00\x30\x00\xfe\x03\xfe\x07\x00\x00\x08\x00\xf0\x03"
        b"\xf0\x07\x00\x06\x00\x06\xf0\x07\xf0\x07\x00\x00\x00\x00\x07\x00"
        b"\x30\x00\xf0\x00\x80\x07\x00\x06\xc0\x03\xf0\x00\x10\x00\x0a\x00"
        b"\x30\x00\xf0\x01\x80\x07\xc0\x07\xf0\x00\xf0\x00\x80\x07\x80\x07"
        b"\xf0\x01\x30\x00\x07\x00\x10\x04\x30\x07\xe0\x03\xc0\x01\x70\x07"
        b"\x10\x06\x00\x04\x07\x00\x30\x00\xf0\x30\xc0\x3f\x00\x1f\xe0\x03"
        b"\x70\x00\x10\x00\x06\x00\x30\x06\x30\x07\xb0\x07\xf0\x06\x70\x06"
        b"\x30\x06\x05\x00\x40\x00\xbe\x0f\xbe\x0f\x00\x00\x00\x00\x04\x00"
        b"\xfe\x07\xfe\x07\x00\x00\x00\x00\x04\x00\xbe\x0f\xbe\x0f\x40\x00"
        b"\x00\x00\x05\x00\x04\x00\x04\x00\x04\x00\x06\x00\x04\x00"
    )

    # Byte string index data.
    _index = (
        b"\x00\x00\x12\x00\x1c\x00\x24\x00\x30\x00\x40\x00\x50\x00\x68\x00"
        b"\x7c\x00\x82\x00\x8c\x00\x98\x00\xa4\x00\xb4\x00\xbc\x00\xc6\x00"
        b"\xce\x00\xd8\x00\xea\x00\xf4\x00\x06\x01\x16\x01\x26\x01\x36\x01"
        b"\x48\x01\x56\x01\x66\x01\x78\x01\x80\x01\x88\x01\x96\x01\xa4\x01"
        b"\xb2\x01\xc4\x01\xdc\x01\xee\x01\x00\x02\x14\x02\x28\x02\x3a\x02"
        b"\x4a\x02\x60\x02\x74\x02\x7c\x02\x8c\x02\x9e\x02\xae\x02\xc6\x02"
        b"\xda\x02\xf0\x02\x04\x03\x1a\x03\x2e\x03\x42\x03\x52\x03\x66\x03"
        b"\x78\x03\x90\x03\xa2\x03\xb4\x03\xc4\x03\xce\x03\xd8\x03\xe2\x03"
        b"\xf2\x03\x08\x04\x14\x04\x26\x04\x3a\x04\x4a\x04\x5c\x04\x6c\x04"
        b"\x76\x04\x88\x04\x9a\x04\xa2\x04\xaa\x04\xba\x04\xc2\x04\xdc\x04"
        b"\xee\x04\x00\x05\x14\x05\x26\x05\x30\x05\x42\x05\x4c\x05\x5e\x05"
        b"\x6e\x05\x84\x05\x94\x05\xa4\x05\xb2\x05\xbe\x05\xc8\x05\xd2\x05"
        b"\xde\x05"
    )

    # Create a memoryview for fast slicing of _font.
    _mvfont = memoryview(_font)

    @classmethod
    def height(cls):
        """Return the height of the font (in pixels)."""
        return 15

    @classmethod
    def max_width(cls):
        """Return the maximum width a character may occupy (in pixels)."""
        return 12

    @classmethod
    def hmap(cls):
        """Return the hmap property (not used in this font)."""
        return False

    @classmethod
    def reverse(cls):
        """Return whether the font is reversed."""
        return False

    @classmethod
    def monospaced(cls):
        """Return False indicating that this font is not monospaced."""
        return False

    @classmethod
    def min_ch(cls):
        """Return the minimum character code available in the font."""
        return 32

    @classmethod
    def max_ch(cls):
        """Return the maximum character code available in the font."""
        return 126

    @classmethod
    def _chr_addr(cls, ordch):
        """
        Given an ordinal value (assumed to be >= 32), lookup the offset address
        for the character in the _font data via the _index data.
        """
        # Each entry in _index is 2 bytes long.
        offset = 2 * (ordch - 32)
        # Interpret the 2 bytes at the given offset as a little-endian integer.
        return int.from_bytes(cls._index[offset : offset + 2], "little")

    @classmethod
    def get_width(cls, s):
        """
        Calculate the pixel width of the string `s` by summing the widths of its characters.
        For characters in the range 32 to 126, it uses the width defined in _font;
        otherwise, it defaults to the width of the space character.
        """
        width = 0
        for ch in s:
            ordch = ord(ch)
            if 32 <= ordch <= 126:
                # Note: the font appears to use the next character (ord+1) for the actual width.
                ordch = ordch + 1
            else:
                ordch = 32
            addr = cls._chr_addr(ordch)
            # Each width is stored as a 2-byte little-endian value.
            width += int.from_bytes(cls._font[addr : addr + 2], "little")
        return width

    @classmethod
    def get_ch(cls, ch):
        """
        Retrieve the bitmap for the character `ch` along with its width (in pixels).

        For characters outside of 32–126, the space character is used.

        Returns:
            A tuple (bitmap, width), where:
              - bitmap is a memoryview slice of the font data
              - width is the width in pixels of the character.
        """
        ordch = ord(ch)
        if 32 <= ordch <= 126:
            ordch = ordch + 1
        else:
            ordch = 32

        start = cls._chr_addr(ordch)
        width = int.from_bytes(cls._font[start : start + 2], "little")
        end = cls._chr_addr(ordch + 1)
        return cls._mvfont[start + 2 : end], width


class CMSansSerif201224:
    """
    Font generated from 'CM Sans Serif 2012.ttf' (version 0.2) with a height of 24 pixels.
    """

    version = "0.2"

    # Raw font data.
    _font = (
        b"\x0c\x00\xc0\x00\x00\xf0\x00\x00\xf0\x00\x00\x78\x70\x07\x38\x78"
        b"\x07\x38\x7c\x07\x78\x1e\x00\xf0\x0f\x00\xf0\x07\x00\xc0\x03\x00"
        b"\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00"
        b"\x00\x02\xf8\x3f\x07\xf8\x3f\x07\xf8\x3f\x02\x00\x00\x00\x00\x00"
        b"\x00\x08\x00\xf8\x03\x00\xf8\x03\x00\x08\x00\x00\x00\x00\x00\xf8"
        b"\x03\x00\xf8\x03\x00\x08\x00\x00\x00\x00\x00\x0c\x00\x00\xe0\x00"
        b"\x80\xe3\x00\x80\xf3\x03\xe0\xff\x03\xe0\xff\x00\xe0\xe3\x00\x80"
        b"\xe3\x03\x80\xff\x03\xe0\xff\x01\xe0\xe7\x00\x80\xe3\x00\x80\x03"
        b"\x00\x0b\x00\x00\xe0\x00\xc0\xe3\x01\xe0\xc7\x01\x70\x8e\x03\xf8"
        b"\xef\x07\xf8\xff\x07\x70\x8c\x03\xe0\x9d\x01\xc0\xf9\x01\x00\xf0"
        b"\x00\x00\x00\x00\x12\x00\xe0\x01\x00\xf0\x03\x00\x38\x07\x00\x38"
        b"\x07\x04\x38\x07\x07\x38\xc7\x07\xf0\xf3\x01\xe0\x79\x00\x00\x1e"
        b"\x00\x80\x07\x00\xe0\xe3\x01\xf8\xf0\x03\x38\x38\x07\x08\x38\x07"
        b"\x00\x38\x07\x00\xf0\x03\x00\xe0\x01\x00\x00\x00\x0f\x00\x00\xf0"
        b"\x00\x00\xf8\x01\xe0\xfd\x03\xf0\x8f\x07\xf8\x07\x07\x38\x0e\x07"
        b"\x38\x1f\x07\xf8\x3f\x07\xf0\xfb\x07\xe0\xf0\x07\x00\xe0\x03\x00"
        b"\xf8\x07\x00\xf8\x07\x00\x78\x06\x00\x00\x04\x04\x00\xf8\x03\x00"
        b"\xf8\x03\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x7f\x00\xe0\xff"
        b"\x03\xf8\xff\x0f\x7c\x00\x1f\x0e\x00\x38\x02\x00\x20\x02\x00\x20"
        b"\x07\x00\x02\x00\x20\x0e\x00\x38\x7c\x00\x1f\xf8\xff\x0f\xe0\xff"
        b"\x03\x00\x7f\x00\x00\x00\x00\x09\x00\x60\x00\x00\x60\x00\x00\x78"
        b"\x03\x00\xf0\x01\x00\xe0\x00\x00\xf8\x03\x00\x68\x01\x00\x60\x00"
        b"\x00\x00\x00\x00\x0c\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00"
        b"\x38\x00\x80\xff\x03\x80\xff\x03\x80\xff\x03\x00\x38\x00\x00\x38"
        b"\x00\x00\x38\x00\x00\x38\x00\x00\x00\x00\x05\x00\x00\x00\x37\x00"
        b"\x00\x3f\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x07\x00\x00\x38\x00"
        b"\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00"
        b"\x38\x00\x05\x00\x00\x00\x07\x00\x00\x07\x00\x00\x07\x00\x00\x00"
        b"\x00\x00\x00\x08\x00\x00\x00\x06\x00\xe0\x07\x00\xfc\x07\xc0\xff"
        b"\x01\xf8\x3f\x00\xfc\x03\x00\x7c\x00\x00\x04\x00\x00\x0d\x00\x80"
        b"\x7f\x00\xe0\xff\x01\xf0\xff\x03\xf8\xc0\x07\x38\x00\x07\x38\x00"
        b"\x07\x38\x00\x07\xf8\xc0\x07\xf0\xff\x03\xe0\xff\x01\x80\x7f\x00"
        b"\x00\x00\x00\x00\x00\x00\x08\x00\xc0\x01\x00\xc0\x01\x00\xe0\x01"
        b"\x00\xf8\xff\x07\xf8\xff\x07\xf8\xff\x07\x00\x00\x00\x00\x00\x00"
        b"\x0d\x00\xc0\x81\x07\xe0\xe1\x07\xf0\xe1\x07\x78\x70\x07\x38\x38"
        b"\x07\x38\x38\x07\x38\x1c\x07\x78\x1e\x07\xf0\x0f\x07\xf0\x07\x07"
        b"\xc0\x03\x07\x00\x00\x00\x00\x00\x00\x0c\x00\xc0\xc0\x00\xf0\xc0"
        b"\x03\xf0\xc0\x03\x78\x80\x07\x38\x00\x07\x38\x0e\x07\x38\x0e\x07"
        b"\x78\x9e\x07\xf0\xff\x03\xf0\xff\x03\xe0\xf1\x00\x00\x00\x00\x0c"
        b"\x00\x00\xf0\x00\x00\xf8\x00\x00\xfe\x00\x00\xef\x00\xc0\xe7\x00"
        b"\xf0\xe1\x00\xf8\xe0\x00\xf8\xff\x07\xf8\xff\x07\xf8\xff\x07\x00"
        b"\xe0\x00\x00\xe0\x00\x0c\x00\x00\xce\x00\xf8\xcf\x03\xf8\xcf\x03"
        b"\x38\x8e\x07\x38\x07\x07\x38\x07\x07\x38\x07\x07\x38\x8f\x07\x38"
        b"\xfe\x03\x38\xfc\x01\x00\xf8\x00\x00\x00\x00\x0d\x00\x00\x7f\x00"
        b"\xe0\xff\x01\xf0\xff\x03\x78\x8e\x07\x38\x07\x07\x38\x07\x07\x38"
        b"\x07\x07\x78\x8f\x07\xf0\xfe\x03\xe0\xfc\x01\xc0\xf8\x00\x00\x00"
        b"\x00\x00\x00\x00\x0b\x00\x38\x00\x00\x38\x00\x00\x38\xc0\x07\x38"
        b"\xf8\x07\x38\xfe\x07\xb8\x3f\x00\xf8\x07\x00\xf8\x01\x00\xf8\x00"
        b"\x00\x78\x00\x00\x38\x00\x00\x0c\x00\x00\xf0\x00\xe0\xf9\x01\xf0"
        b"\xff\x03\xf0\x9f\x07\x38\x0e\x07\x38\x0e\x07\x38\x0e\x07\x38\x0e"
        b"\x07\xf0\x9f\x07\xf0\xff\x03\xe0\xf9\x01\x00\xf0\x00\x0d\x00\xc0"
        b"\x07\x00\xe0\x0f\x01\xf0\x1f\x03\x78\x3c\x07\x38\x38\x07\x38\x38"
        b"\x07\x38\x38\x07\x38\x38\x07\x70\x9c\x07\xf0\xff\x03\xe0\xff\x01"
        b"\x80\x7f\x00\x00\x00\x00\x05\x00\x00\x07\x07\x00\x07\x07\x00\x07"
        b"\x07\x00\x00\x00\x00\x00\x00\x05\x00\x00\x07\x37\x00\x07\x3f\x00"
        b"\x07\x1f\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x38\x00\x00\x38\x00"
        b"\x00\x7c\x00\x00\x6c\x00\x00\xee\x00\x00\xee\x00\x00\xc7\x01\x00"
        b"\xc7\x01\x80\x83\x03\x00\x00\x00\x0b\x00\x00\xce\x01\x00\xce\x01"
        b"\x00\xce\x01\x00\xce\x01\x00\xce\x01\x00\xce\x01\x00\xce\x01\x00"
        b"\xce\x01\x00\x00\x00\x0a\x00\x80\x83\x03\x80\x83\x03\x00\xc7\x01"
        b"\x00\xc7\x01\x00\xee\x00\x00\xee\x00\x00\x7c\x00\x00\x7c\x00\x00"
        b"\x38\x00\x00\x00\x00\x0c\x00\xc0\x00\x00\xf0\x00\x00\xf0\x00\x00"
        b"\x78\x70\x07\x38\x78\x07\x38\x7c\x07\x78\x1e\x00\xf0\x0f\x00\xf0"
        b"\x07\x00\xc0\x03\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x3f\x00"
        b"\xc0\xff\x00\xe0\xe1\x01\xf0\xc0\x03\x70\xbc\x03\x78\x7e\x07\x38"
        b"\x7f\x07\xb8\x73\x07\xb8\x33\x07\xb8\x3f\x07\x38\x7f\x07\x70\xf3"
        b"\x03\x70\x70\x03\xe0\x38\x02\xe0\x3f\x00\x80\x0f\x00\x00\x00\x00"
        b"\x0f\x00\x00\x00\x06\x00\xc0\x07\x00\xf0\x07\x00\xfe\x03\xc0\xff"
        b"\x00\xf8\xef\x00\xf8\xe1\x00\x78\xe0\x00\xf8\xe3\x00\xf0\xff\x00"
        b"\xc0\xff\x00\x00\xfe\x07\x00\xf0\x07\x00\x80\x07\x00\x00\x04\x0f"
        b"\x00\xf8\xff\x07\xf8\xff\x07\xf8\xff\x07\x38\x0e\x07\x38\x0e\x07"
        b"\x38\x0e\x07\x38\x0e\x07\x38\x9e\x07\xf8\xff\x07\xf0\xff\x03\xe0"
        b"\xf1\x01\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\xc0\x01\x00\xe4"
        b"\x03\x00\xe6\x07\x00\x37\x07\x80\x37\x07\x80\x33\x07\x80\x33\x07"
        b"\x80\x33\x07\x80\x93\x03\x80\xff\x07\x00\xff\x07\x00\xfe\x07\x00"
        b"\x00\x00\x0e\x00\xfc\xff\x07\xfc\xff\x07\xfc\xff\x07\x00\x87\x03"
        b"\x80\x03\x07\x80\x03\x07\x80\x03\x07\x80\x03\x07\x80\x87\x07\x00"
        b"\xff\x03\x00\xfe\x01\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x0d\x00"
        b"\x00\x78\x00\x00\xfe\x01\x00\xff\x03\x00\x87\x03\x80\x03\x07\x80"
        b"\x03\x07\x80\x03\x07\x80\x03\x07\x00\x87\x03\x00\xff\x03\x00\xfe"
        b"\x01\x00\x78\x00\x00\x00\x00\x0e\x00\x80\xff\xff\x80\xff\xff\x80"
        b"\xff\xff\x00\x87\x03\x80\x03\x07\x80\x03\x07\x80\x03\x07\x80\x03"
        b"\x07\x80\x87\x07\x00\xff\x03\x00\xfe\x01\x00\x7c\x00\x00\x00\x00"
        b"\x00\x00\x00\x0e\x00\x00\x78\x00\x00\xfe\x01\x00\xff\x03\x00\x87"
        b"\x03\x80\x87\x07\x80\x03\x07\x80\x03\x07\x80\x03\x07\x80\x87\x07"
        b"\x00\x87\x03\x80\xff\xff\x80\xff\xff\x80\xff\xff\x00\x00\x00\x08"
        b"\x00\x80\xff\x07\x80\xff\x07\x80\xff\x07\x00\x07\x00\x80\x03\x00"
        b"\x80\x03\x00\x80\x03\x00\x00\x00\x00\x0c\x00\x00\x80\x00\x00\x8e"
        b"\x01\x00\x9f\x03\x80\x9f\x07\x80\x3b\x07\x80\x33\x07\x80\x33\x07"
        b"\x80\x33\x07\x00\xf7\x07\x00\xe7\x03\x00\xc6\x01\x00\x00\x00\x07"
        b"\x00\x80\x03\x00\xfc\xff\x00\xfc\xff\x03\xfc\xff\x07\x80\x03\x07"
        b"\x80\x03\x07\x00\x00\x00\x0d\x00\x80\xff\x00\x80\xff\x03\x80\xff"
        b"\x03\x00\x80\x07\x00\x00\x07\x00\x00\x07\x00\x00\x07\x00\x80\x03"
        b"\x80\xff\x07\x80\xff\x07\x80\xff\x07\x00\x00\x00\x00\x00\x00\x0c"
        b"\x00\x80\x01\x00\x80\x0f\x00\x80\x3f\x00\x00\xfe\x01\x00\xf0\x07"
        b"\x00\x80\x07\x00\xc0\x07\x00\xf8\x07\x00\xff\x00\x80\x3f\x00\x80"
        b"\x07\x00\x80\x00\x00\x12\x00\x80\x01\x00\x80\x0f\x00\x80\xff\x00"
        b"\x00\xfe\x07\x00\xe0\x07\x00\xc0\x07\x00\xfc\x07\x80\xff\x00\x80"
        b"\x0f\x00\x80\x3f\x00\x00\xff\x01\x00\xf0\x07\x00\x80\x07\x00\xf8"
        b"\x07\x80\xff\x03\x80\x3f\x00\x80\x07\x00\x80\x00\x00\x0c\x00\x80"
        b"\x00\x04\x80\x01\x07\x80\x87\x07\x80\xef\x07\x00\xfe\x01\x00\x7c"
        b"\x00\x00\xfe\x00\x00\xff\x03\x80\xc7\x07\x80\x03\x07\x80\x00\x06"
        b"\x00\x00\x04\x0c\x00\x80\x01\x00\x80\x07\xe0\x80\x3f\xe0\x00\xff"
        b"\xf0\x00\xf8\xff\x00\xc0\x7f\x00\xc0\x1f\x00\xf8\x07\x00\xff\x00"
        b"\x80\x1f\x00\x80\x07\x00\x80\x00\x00\x0b\x00\x80\x03\x07\x80\x83"
        b"\x07\x80\xc3\x07\x80\xe3\x07\x80\xf3\x07\x80\x7b\x07\x80\x3f\x07"
        b"\x80\x1f\x07\x80\x0f\x07\x80\x07\x07\x00\x00\x07\x08\x00\x00\x0c"
        b"\x00\x00\x1e\x00\xfc\xff\x0f\xfe\xff\x1f\xfe\xf3\x1f\x06\x00\x38"
        b"\x06\x00\x38\x00\x00\x00\x00\x00"
    )

    # Raw index data.
    _index = (
        b"\x00\x00\x26\x00\x3d\x00\x51\x00\x6b\x00\x91\x00\xb4\x00\xec\x00"
        b"\x1b\x01\x29\x01\x40\x01\x57\x01\x74\x01\x9a\x01\xab\x01\xc2\x01"
        b"\xd3\x01\xed\x01\x16\x02\x30\x02\x59\x02\x7f\x02\xa5\x02\xcb\x02"
        b"\xf4\x02\x17\x03\x3d\x03\x66\x03\x77\x03\x88\x03\xa8\x03\xcb\x03"
        b"\xeb\x03\x11\x04\x46\x04\x75\x04\xa4\x04\xd6\x04\x05\x05\x31\x05"
        b"\x5a\x05\x8f\x05\xbe\x05\xd2\x05\xf8\x05\x24\x06\x4a\x06\x82\x06"
        b"\xb1\x06\xe6\x06\x12\x07\x47\x07\x76\x07\xa2\x07\xc8\x07\xf4\x07"
        b"\x20\x08\x5e\x08\x8a\x08\xb3\x08\xdc\x08\xf3\x08\x0d\x09\x24\x09"
        b"\x4a\x09\x82\x09\x9f\x09\xc8\x09\xf4\x09\x1d\x0a\x49\x0a\x72\x0a"
        b"\x89\x0a\xb5\x0a\xde\x0a\xef\x0a\x00\x0b\x26\x0b\x37\x0b\x75\x0b"
        b"\x9e\x0b\xc7\x0b\xf3\x0b\x1f\x0c\x39\x0c\x5f\x0c\x76\x0c\x9f\x0c"
        b"\xc5\x0c\xfd\x0c\x23\x0d\x49\x0d\x6c\x0d\x86\x0d\x97\x0d\xae\x0d"
        b"\xcb\x0d"
    )

    # Create a memoryview for fast slicing of _font.
    _mvfont = memoryview(_font)

    @classmethod
    def height(cls):
        """Return the font height (in pixels)."""
        return 24

    @classmethod
    def max_width(cls):
        """Return the maximum character width (in pixels)."""
        return 20

    @classmethod
    def hmap(cls):
        """Return the hmap flag (not used in this font)."""
        return False

    @classmethod
    def reverse(cls):
        """Return the reverse flag."""
        return False

    @classmethod
    def monospaced(cls):
        """Return False (this font is not monospaced)."""
        return False

    @classmethod
    def min_ch(cls):
        """Return the minimum character code."""
        return 32

    @classmethod
    def max_ch(cls):
        """Return the maximum character code."""
        return 126

    @classmethod
    def _chr_addr(cls, ordch):
        """
        Given the ordinal value of a character (assumed to be >= 32), return the
        corresponding offset into the _font data using the index table.
        """
        offset = 2 * (ordch - 32)
        return int.from_bytes(cls._index[offset : offset + 2], "little")

    @classmethod
    def get_width(cls, s):
        """
        Calculate the pixel width of the string `s` by summing the widths of its characters.
        For characters in the range 32 to 126, the font uses the width defined in _font;
        otherwise it defaults to the width of the space character.
        """
        width = 0
        for ch in s:
            ordch = ord(ch)
            # Use next character's width if in valid range, otherwise treat as space.
            if 32 <= ordch <= 126:
                ordch += 1
            else:
                ordch = 32
            addr = cls._chr_addr(ordch)
            width += int.from_bytes(cls._font[addr : addr + 2], "little")
        return width

    @classmethod
    def get_ch(cls, ch):
        """
        Retrieve the bitmap slice for the character `ch` together with its width.
        Characters outside the range 32–126 are treated as the space character.

        Returns:
            A tuple (bitmap, width) where:
              - bitmap is a memoryview slice of the font data
              - width is the pixel width of the character.
        """
        ordch = ord(ch)
        if 32 <= ordch <= 126:
            ordch += 1
        else:
            ordch = 32
        start = cls._chr_addr(ordch)
        width = int.from_bytes(cls._font[start : start + 2], "little")
        end = cls._chr_addr(ordch + 1)
        return cls._mvfont[start + 2 : end], width


class CMSansSerif201231:
    """
    Font generated from 'CM Sans Serif 2012.ttf' (version 0.2) with a height of 31 pixels.
    """

    version = "0.2"

    # Raw font data.
    _font = (
        b"\x0f\x00\x00\x07\x00\x00\xc0\x07\x00\x00\xe0\x07\x00\x00\xe0\x07"
        b"\x00\x00\xf0\x01\x67\x00\xf0\xc0\xf7\x00\xf0\xe0\xf7\x00\xf0\xe0"
        b"\x67\x00\xf0\xf1\x01\x00\xe0\xff\x00\x00\xe0\x7f\x00\x00\xc0\x3f"
        b"\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x08\x00\xf0\xff\xf3\x00\xf0\xff\xf3\x00\xf0\xff"
        b"\xf3\x00\xf0\xff\x63\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x0a\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00"
        b"\xf0\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x0f\x00\x00"
        b"\xf0\x0f\x00\x00\xf0\x0f\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00"
        b"\x0f\x00\x00\x00\x0e\x00\x00\x0e\x0e\x00\x00\x0e\x7e\x00\x00\xfe"
        b"\x7f\x00\xe0\xff\x7f\x00\xe0\xff\x0f\x00\xe0\x0f\x0e\x00\x00\x0e"
        b"\x0e\x00\x00\x0e\x7f\x00\x00\xfe\x7f\x00\xe0\xff\x7f\x00\xe0\xff"
        b"\x0f\x00\xe0\x0f\x0e\x00\x00\x0e\x0e\x00\x00\x0e\x00\x00\x0e\x00"
        b"\x00\x1f\x0e\x00\x80\x3f\x1e\x00\xc0\x3f\x3e\x00\xc0\x79\x3c\x00"
        b"\xc0\x71\x38\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xc0\xe1\x38\x00"
        b"\xc0\xe3\x38\x00\xc0\xe7\x3f\x00\x80\xc7\x1f\x00\x00\x86\x0f\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x80\x07\x00\x00\xc0\x0f"
        b"\x00\x00\xe0\x1f\x00\x00\xf0\x3c\x00\x00\x70\x38\x80\x00\x70\x38"
        b"\xe0\x00\x70\x38\xf8\x00\xf0\x3c\x7e\x00\xe0\x1f\x1f\x00\xc0\xcf"
        b"\x0f\x00\x80\xf7\x03\x00\x00\xfc\x00\x00\x00\x3f\x1e\x00\x80\x8f"
        b"\x7f\x00\xe0\x87\x7f\x00\xf0\xc1\xf3\x00\x70\xc0\xe1\x00\x10\xc0"
        b"\xe1\x00\x00\xc0\xf3\x00\x00\x80\x7f\x00\x00\x80\x7f\x00\x00\x00"
        b"\x1e\x00\x00\x00\x00\x00\x13\x00\x00\x00\x0f\x00\x00\x80\x3f\x00"
        b"\x00\xc0\x3f\x00\x80\xe7\x7f\x00\xe0\x7f\xf8\x00\xe0\x3f\xf8\x00"
        b"\xf0\x3f\xf0\x00\xf0\x78\xf0\x00\xf0\xf8\xf0\x00\xf0\xff\xf3\x00"
        b"\xe0\xdf\xff\x00\xe0\x8f\xff\x00\x80\x07\x7e\x00\x00\xc0\xff\x00"
        b"\x00\xc0\xff\x00\x00\xc0\xff\x00\x00\xc0\xc3\x00\x00\x00\x80\x00"
        b"\x00\x00\x00\x00\x05\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x00\x00\xfc\x03\x00"
        b"\x80\xff\x1f\x00\xe0\xff\x7f\x00\xf8\xff\xff\x01\xfc\x01\xf8\x03"
        b"\x3e\x00\xc0\x07\x0e\x00\x00\x07\x02\x00\x00\x04\x00\x00\x00\x00"
        b"\x09\x00\x02\x00\x00\x04\x0e\x00\x00\x07\x3e\x00\xc0\x07\xfc\x01"
        b"\xf8\x03\xf8\xff\xff\x01\xe0\xff\x7f\x00\x80\xff\x1f\x00\x00\xfc"
        b"\x03\x00\x00\x00\x00\x00"
    )

    # Raw index data.
    _index = (
        b"\x00\x00\x3e\x00\x64\x00\x86\x00\xb0\x00\xee\x00\x28\x01\x86\x01"
        b"\xd4\x01\xea\x01\x10\x02\x36\x02\x64\x02\xa2\x02\xbc\x02\xe2\x02"
        b"\xfc\x02\x26\x03\x6c\x03\x92\x03\xd4\x03\x16\x04\x58\x04\x96\x04"
        b"\xd8\x04\x12\x05\x54\x05\x96\x05\xb0\x05\xca\x05\xfc\x05\x36\x06"
        b"\x68\x06\xa6\x06\x00\x07\x4e\x07\x98\x07\xea\x07\x38\x08\x7e\x08"
        b"\xc0\x08\x16\x09\x68\x09\x86\x09\xc4\x09\x0e\x0a\x50\x0a\xb2\x0a"
        b"\x04\x0b\x5e\x0b\xa8\x0b\xfe\x0b\x48\x0c\x92\x0c\xd0\x0c\x1a\x0d"
        b"\x60\x0d\xc6\x0d\x0c\x0e\x56\x0e\x9c\x0e\xc2\x0e\xec\x0e\x12\x0f"
        b"\x50\x0f\xae\x0f\xe0\x0f\x26\x10\x70\x10\xb2\x10\xfc\x10\x3e\x11"
        b"\x64\x11\xaa\x11\xec\x11\x0a\x12\x24\x12\x66\x12\x84\x12\xee\x12"
        b"\x30\x13\x76\x13\xc0\x13\x06\x14\x30\x14\x6e\x14\x94\x14\xd6\x14"
        b"\x14\x15\x6e\x15\xac\x15\xea\x15\x24\x16\x4e\x16\x70\x16\x96\x16"
        b"\xc8\x16"
    )

    # Create a memoryview for fast slicing of _font.
    _mvfont = memoryview(_font)

    @classmethod
    def height(cls):
        """Return the font height (in pixels)."""
        return 31

    @classmethod
    def max_width(cls):
        """Return the maximum character width (in pixels)."""
        return 26

    @classmethod
    def hmap(cls):
        """Return the hmap flag (not used in this font)."""
        return False

    @classmethod
    def reverse(cls):
        """Return the reverse flag."""
        return False

    @classmethod
    def monospaced(cls):
        """Return False, because this font is not monospaced."""
        return False

    @classmethod
    def min_ch(cls):
        """Return the minimum character code supported."""
        return 32

    @classmethod
    def max_ch(cls):
        """Return the maximum character code supported."""
        return 126

    @classmethod
    def _chr_addr(cls, ordch):
        """
        Given a character's ordinal (assumed to be >= 32), use the index data to
        return the corresponding offset into the _font data.
        """
        offset = 2 * (ordch - 32)
        return int.from_bytes(cls._index[offset : offset + 2], "little")

    @classmethod
    def get_width(cls, s):
        """
        Calculate and return the pixel width of the string `s` by summing the widths
        of its characters. For characters in the range 32 to 126, the font uses the
        width defined in _font; otherwise the space character (code 32) is used.
        """
        total_width = 0
        for ch in s:
            ordch = ord(ch)
            if 32 <= ordch <= 126:
                ordch += 1
            else:
                ordch = 32
            addr = cls._chr_addr(ordch)
            total_width += int.from_bytes(cls._font[addr : addr + 2], "little")
        return total_width

    @classmethod
    def get_ch(cls, ch):
        """
        Retrieve the bitmap for the character `ch` along with its pixel width.
        Characters outside 32–126 are treated as the space character.

        Returns:
            A tuple (bitmap, width) where:
              - bitmap is a memoryview slice of the _font data for the character
              - width is the pixel width.
        """
        ordch = ord(ch)
        if 32 <= ordch <= 126:
            ordch += 1
        else:
            ordch = 32
        start = cls._chr_addr(ordch)
        width = int.from_bytes(cls._font[start : start + 2], "little")
        next_addr = cls._chr_addr(ordch + 1)
        return cls._mvfont[start + 2 : next_addr], width
